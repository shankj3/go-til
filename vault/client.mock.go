// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package vault is a generated GoMock package.
package vault

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
	reflect "reflect"
)

// MockVaulty is a mock of Vaulty interface
type MockVaulty struct {
	ctrl     *gomock.Controller
	recorder *MockVaultyMockRecorder
}

// MockVaultyMockRecorder is the mock recorder for MockVaulty
type MockVaultyMockRecorder struct {
	mock *MockVaulty
}

// NewMockVaulty creates a new mock instance
func NewMockVaulty(ctrl *gomock.Controller) *MockVaulty {
	mock := &MockVaulty{ctrl: ctrl}
	mock.recorder = &MockVaultyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVaulty) EXPECT() *MockVaultyMockRecorder {
	return m.recorder
}

// AddUserAuthData mocks base method
func (m *MockVaulty) AddUserAuthData(user string, data map[string]interface{}) (*api.Secret, error) {
	ret := m.ctrl.Call(m, "AddUserAuthData", user, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserAuthData indicates an expected call of AddUserAuthData
func (mr *MockVaultyMockRecorder) AddUserAuthData(user, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserAuthData", reflect.TypeOf((*MockVaulty)(nil).AddUserAuthData), user, data)
}

// GetUserAuthData mocks base method
func (m *MockVaulty) GetUserAuthData(user string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetUserAuthData", user)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthData indicates an expected call of GetUserAuthData
func (mr *MockVaultyMockRecorder) GetUserAuthData(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthData", reflect.TypeOf((*MockVaulty)(nil).GetUserAuthData), user)
}

// AddVaultData mocks base method
func (m *MockVaulty) AddVaultData(path string, data map[string]interface{}) (*api.Secret, error) {
	ret := m.ctrl.Call(m, "AddVaultData", path, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVaultData indicates an expected call of AddVaultData
func (mr *MockVaultyMockRecorder) AddVaultData(path, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVaultData", reflect.TypeOf((*MockVaulty)(nil).AddVaultData), path, data)
}

// GetVaultData mocks base method
func (m *MockVaulty) GetVaultData(path string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetVaultData", path)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultData indicates an expected call of GetVaultData
func (mr *MockVaultyMockRecorder) GetVaultData(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultData", reflect.TypeOf((*MockVaulty)(nil).GetVaultData), path)
}

// GetVaultSecret mocks base method
func (m *MockVaulty) GetVaultSecret(path string) (*api.Secret, error) {
	ret := m.ctrl.Call(m, "GetVaultSecret", path)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultSecret indicates an expected call of GetVaultSecret
func (mr *MockVaultyMockRecorder) GetVaultSecret(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultSecret", reflect.TypeOf((*MockVaulty)(nil).GetVaultSecret), path)
}

// CreateToken mocks base method
func (m *MockVaulty) CreateToken(request *api.TokenCreateRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateToken", request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockVaultyMockRecorder) CreateToken(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockVaulty)(nil).CreateToken), request)
}

// CreateThrowawayToken mocks base method
func (m *MockVaulty) CreateThrowawayToken() (string, error) {
	ret := m.ctrl.Call(m, "CreateThrowawayToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThrowawayToken indicates an expected call of CreateThrowawayToken
func (mr *MockVaultyMockRecorder) CreateThrowawayToken() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThrowawayToken", reflect.TypeOf((*MockVaulty)(nil).CreateThrowawayToken))
}

// CreateVaultPolicy mocks base method
func (m *MockVaulty) CreateVaultPolicy() error {
	ret := m.ctrl.Call(m, "CreateVaultPolicy")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVaultPolicy indicates an expected call of CreateVaultPolicy
func (mr *MockVaultyMockRecorder) CreateVaultPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaultPolicy", reflect.TypeOf((*MockVaulty)(nil).CreateVaultPolicy))
}

// GetAddress mocks base method
func (m *MockVaulty) GetAddress() string {
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockVaultyMockRecorder) GetAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockVaulty)(nil).GetAddress))
}

// Healthy mocks base method
func (m *MockVaulty) Healthy() bool {
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockVaultyMockRecorder) Healthy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockVaulty)(nil).Healthy))
}

// DeletePath mocks base method
func (m *MockVaulty) DeletePath(path string) error {
	ret := m.ctrl.Call(m, "DeletePath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePath indicates an expected call of DeletePath
func (mr *MockVaultyMockRecorder) DeletePath(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePath", reflect.TypeOf((*MockVaulty)(nil).DeletePath), path)
}

// RenewLeaseForever mocks base method
func (m *MockVaulty) RenewLeaseForever(secret *api.Secret) error {
	ret := m.ctrl.Call(m, "RenewLeaseForever", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewLeaseForever indicates an expected call of RenewLeaseForever
func (mr *MockVaultyMockRecorder) RenewLeaseForever(secret interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLeaseForever", reflect.TypeOf((*MockVaulty)(nil).RenewLeaseForever), secret)
}

// RenewLeaseOnce mocks base method
func (m *MockVaulty) RenewLeaseOnce(leaseID string, increment int) (*api.Secret, error) {
	ret := m.ctrl.Call(m, "RenewLeaseOnce", leaseID, increment)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLeaseOnce indicates an expected call of RenewLeaseOnce
func (mr *MockVaultyMockRecorder) RenewLeaseOnce(leaseID, increment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLeaseOnce", reflect.TypeOf((*MockVaulty)(nil).RenewLeaseOnce), leaseID, increment)
}
