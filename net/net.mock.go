// Code generated by MockGen. DO NOT EDIT.
// Source: net.go

// Package net is a generated GoMock package.
package net

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	http "net/http"
	url "net/url"
	reflect "reflect"
)

// MockHttpClient is a mock of HttpClient interface
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// GetUrl mocks base method
func (m *MockHttpClient) GetUrl(url string, unmarshalObj proto.Message) error {
	ret := m.ctrl.Call(m, "GetUrl", url, unmarshalObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUrl indicates an expected call of GetUrl
func (mr *MockHttpClientMockRecorder) GetUrl(url, unmarshalObj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockHttpClient)(nil).GetUrl), url, unmarshalObj)
}

// GetUrlRawData mocks base method
func (m *MockHttpClient) GetUrlRawData(url string) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetUrlRawData", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlRawData indicates an expected call of GetUrlRawData
func (mr *MockHttpClientMockRecorder) GetUrlRawData(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlRawData", reflect.TypeOf((*MockHttpClient)(nil).GetUrlRawData), url)
}

// GetUrlResponse mocks base method
func (m *MockHttpClient) GetUrlResponse(url string) (*http.Response, error) {
	ret := m.ctrl.Call(m, "GetUrlResponse", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlResponse indicates an expected call of GetUrlResponse
func (mr *MockHttpClientMockRecorder) GetUrlResponse(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlResponse", reflect.TypeOf((*MockHttpClient)(nil).GetUrlResponse), url)
}

// PostUrl mocks base method
func (m *MockHttpClient) PostUrl(url, body string, unmarshalObj proto.Message) error {
	ret := m.ctrl.Call(m, "PostUrl", url, body, unmarshalObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUrl indicates an expected call of PostUrl
func (mr *MockHttpClientMockRecorder) PostUrl(url, body, unmarshalObj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUrl", reflect.TypeOf((*MockHttpClient)(nil).PostUrl), url, body, unmarshalObj)
}

// PostUrlForm mocks base method
func (m *MockHttpClient) PostUrlForm(url string, form url.Values) (*http.Response, error) {
	ret := m.ctrl.Call(m, "PostUrlForm", url, form)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostUrlForm indicates an expected call of PostUrlForm
func (mr *MockHttpClientMockRecorder) PostUrlForm(url, form interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUrlForm", reflect.TypeOf((*MockHttpClient)(nil).PostUrlForm), url, form)
}

// GetAuthClient mocks base method
func (m *MockHttpClient) GetAuthClient() *http.Client {
	ret := m.ctrl.Call(m, "GetAuthClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetAuthClient indicates an expected call of GetAuthClient
func (mr *MockHttpClientMockRecorder) GetAuthClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthClient", reflect.TypeOf((*MockHttpClient)(nil).GetAuthClient))
}

// MockOAuthClientCreds is a mock of OAuthClientCreds interface
type MockOAuthClientCreds struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthClientCredsMockRecorder
}

// MockOAuthClientCredsMockRecorder is the mock recorder for MockOAuthClientCreds
type MockOAuthClientCredsMockRecorder struct {
	mock *MockOAuthClientCreds
}

// NewMockOAuthClientCreds creates a new mock instance
func NewMockOAuthClientCreds(ctrl *gomock.Controller) *MockOAuthClientCreds {
	mock := &MockOAuthClientCreds{ctrl: ctrl}
	mock.recorder = &MockOAuthClientCredsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthClientCreds) EXPECT() *MockOAuthClientCredsMockRecorder {
	return m.recorder
}

// GetClientId mocks base method
func (m *MockOAuthClientCreds) GetClientId() string {
	ret := m.ctrl.Call(m, "GetClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientId indicates an expected call of GetClientId
func (mr *MockOAuthClientCredsMockRecorder) GetClientId() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientId", reflect.TypeOf((*MockOAuthClientCreds)(nil).GetClientId))
}

// GetClientSecret mocks base method
func (m *MockOAuthClientCreds) GetClientSecret() string {
	ret := m.ctrl.Call(m, "GetClientSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientSecret indicates an expected call of GetClientSecret
func (mr *MockOAuthClientCredsMockRecorder) GetClientSecret() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockOAuthClientCreds)(nil).GetClientSecret))
}

// GetTokenURL mocks base method
func (m *MockOAuthClientCreds) GetTokenURL() string {
	ret := m.ctrl.Call(m, "GetTokenURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTokenURL indicates an expected call of GetTokenURL
func (mr *MockOAuthClientCredsMockRecorder) GetTokenURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenURL", reflect.TypeOf((*MockOAuthClientCreds)(nil).GetTokenURL))
}
